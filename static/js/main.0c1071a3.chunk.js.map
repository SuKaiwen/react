{"version":3,"sources":["App.js","Connect4.js","Button.js","CalcInput.js","ClearButton.js","Calculator.js","Sorter.js","Main.js","serviceWorker.js","index.js"],"names":["App","state","tictacboard","player_turn","winner","message","moves","squareClicked","bind","this","setState","index","win","i","length","combination","className","style","display","margin","justifyContent","backgroundColor","color","marginRight","marginLeft","to","map","tictacsquare","onClick","reset","Component","Connect4","connect4board","targetCol","j","createBoard","push","connect4square","Button","isOperator","val","isNaN","props","children","handleClick","CalcInput","ClearButton","handleClear","Calculator","addInput","input","addDecimal","indexOf","addition","prevNum","prevNumber","operator","subtraction","multiplication","division","equal","curr","parseFloat","currentNumber","clearInput","Sorter","numbers","Math","floor","random","createNumbers","swapArray","mergeSort","bars","document","getElementsByClassName","setTimeout","bar1Index","bar2Height","height","arr","arr2","slice","mergeSort2","start","end","middle","merge","k","value","id","key","animate","Main","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0c1071a3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport {Link} from 'react-router-dom';\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state = {\n            tictacboard:[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n            player_turn: \"X\",\n            winner: 0,\n            message: \"\",\n            moves: 1\n        }\n\n        this.squareClicked = this.squareClicked.bind(this)\n    }\n\n    reset(){\n        this.setState({\n            tictacboard:[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n            player_turn: \"X\",\n            winner: 0,\n            message: \"\",\n            moves: 1\n        })\n    }\n\n    squareClicked(index){\n        // If statement ensures the game stops once a winner is determined.\n        if(this.state.winner === 0){\n            let player_turn = this.state.player_turn\n            let tictacboard = this.state.tictacboard\n            let winner = this.state.winner\n            let message = this.state.message\n            let moves = this.state.moves\n\n            //Update the board with new X or O.\n            //Ensure player cannot choose a square that has already been chosen.\n            if(tictacboard[index] === \"\"){\n                moves = moves + 1;\n                tictacboard[index] = player_turn;\n\n                //Check winning combinations.\n                let win = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\n                for(let i = 0; i < win.length; i++){\n                    let combination = win[i]\n                    if(tictacboard[combination[0]] === tictacboard[combination[1]] && tictacboard[combination[1]] === tictacboard[combination[2]] && tictacboard[combination[0]] !== \"\"){\n                        winner = 1;\n                        if(tictacboard[combination[0]] === \"O\"){\n                            message = \"Winner: O in move number \" + this.state.moves;\n                        }else{\n                            message = \"Winner: X in move number \" + this.state.moves;\n                        }\n                    }\n                }\n\n                // Max moves and no winner therefore tie!\n                if(moves > 9 && winner === 0){\n                    message = \"Tie!\";\n                    winner = 1;\n                }\n\n                //Alternate the player turns.\n                player_turn = (player_turn === \"X\") ? \"O\": \"X\";\n\n                this.setState({\n                    player_turn: player_turn,\n                    tictacboard: tictacboard,\n                    winner: winner,\n                    message: message,\n                    moves: moves\n                })\n            }\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n              <div style={{display:'flex', margin:'auto', justifyContent:'center', backgroundColor:'#3F2C7F'}}>\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}>Kevin Su</h4>\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/TicTacToe'} style={{ color: 'white'}}>Tic-Tac-Toe</Link></h4>\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Connect4'} style={{ color: 'white'}}>Connect-4</Link></h4>\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Calculator'} style={{ color: 'white'}}>Calculator</Link></h4>\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Sorter'} style={{ color: 'white'}}>Sorter</Link></h4>\n              </div>\n              <header className=\"App-header\">\n                <h1 style={{color: 'green'}}>Tic-Tac-Toe</h1>\n                <div className=\"tictacgrid\">\n                    {this.state.tictacboard.map((tictacsquare, index)=>{\n                        return(<div onClick={()=>this.squareClicked(index)} className=\"tictacsquare\"><h1>{tictacsquare}</h1></div>)\n                    })}\n                </div>\n                <h4>{this.state.message}</h4>\n                <button onClick={()=>this.reset()} className=\"button\">Reset</button>\n              </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Connect4 extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            connect4board:[],\r\n            player_turn: \"X\",\r\n            winner: 0,\r\n            message: \"\",\r\n            moves: 1\r\n        }\r\n    }\r\n\r\n    squareClicked(index){\r\n        // If statement ensures the game stops once a winner is determined.\r\n        if(this.state.winner === 0){\r\n            let player_turn = this.state.player_turn\r\n            let connect4board = this.state.connect4board\r\n            let winner = this.state.winner\r\n            let message = this.state.message\r\n            let moves = this.state.moves\r\n\r\n            // Columns and their indices\r\n            let col1 = [0, 7, 14, 21, 28, 35]\r\n            let col2 = [1, 8, 15, 22, 29, 36]\r\n            let col3 = [2, 9, 16, 23, 30, 37]\r\n            let col4 = [3, 10, 17, 24, 31, 38]\r\n            let col5 = [4, 11, 18, 25, 32, 39]\r\n            let col6 = [5, 12, 19, 26, 33, 40]\r\n            let col7 = [6, 13, 20, 27, 34, 41]\r\n\r\n            let targetCol = []\r\n\r\n            // Find which column the player selected.\r\n            if(index % 7 === 0){\r\n                targetCol = col1;\r\n            }else if(index % 7 === 1){\r\n                targetCol = col2;\r\n            }else if(index % 7 === 2){\r\n                targetCol = col3;\r\n            }else if(index % 7 === 3){\r\n                targetCol = col4;\r\n            }else if(index % 7 === 4){\r\n                targetCol = col5;\r\n            }else if(index % 7 === 5){\r\n                targetCol = col6;\r\n            }else{\r\n                targetCol = col7;\r\n            }\r\n\r\n            // Fill the squares from the bottom up.\r\n            let i = 5\r\n            while(i >= 0){\r\n                if(connect4board[targetCol[i]] === \"\"){\r\n                    connect4board[targetCol[i]] = player_turn;\r\n\r\n                    //Alternate player turns.\r\n                    player_turn = (player_turn === \"X\") ? \"O\": \"X\";\r\n                    moves = moves + 1;\r\n                    break;\r\n                }\r\n                i = i - 1;\r\n            }\r\n\r\n            // Checks vertical wins.\r\n            for(let i = 0; i < 21; i++){\r\n                let win = [i, i+7, i+14, i+21]\r\n                if(connect4board[win[0]] === connect4board[win[1]] && connect4board[win[2]] === connect4board[win[3]] && connect4board[win[0]] === connect4board[win[2]] &&\r\n                connect4board[win[0]] !== \"\"){\r\n                    winner = 1;\r\n                    if(connect4board[win[0]] === \"O\"){\r\n                        message = \"Winner: Red in move number \" + this.state.moves;\r\n                    }else{\r\n                        message = \"Winner: Yellow in move number \" + this.state.moves;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Checks horizontal wins.\r\n            for(let i = 0; i < 4; i++){\r\n                for(let j = 0; j < 6; j++){\r\n                    if(connect4board[i + j*7] === connect4board[i+1 + j*7] && connect4board[i+2 + j*7] === connect4board[i+3 + j*7]\r\n                    && connect4board[i + j*7] === connect4board[i+2 + j*7] && connect4board[i + j*7] !== \"\"){\r\n                        winner = 1;\r\n                        if(connect4board[i + j*7] === \"O\"){\r\n                            message = \"Winner: Red in move number \" + this.state.moves;\r\n                        }else{\r\n                            message = \"Winner: Yellow in move number \" + this.state.moves;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Checks diagonals descending left to right.\r\n            for(let i = 0; i < 4; i++){\r\n                for(let j = 0; j < 3; j++){\r\n                    if(connect4board[i + j*7] === connect4board[i + j*7 + 8] && connect4board[i + j*7 + 16] === connect4board[i + j*7 + 24]\r\n                    && connect4board[i + j*7] === connect4board[i + j*7 + 16] && connect4board[i + j*7] !== \"\"){\r\n                        winner = 1;\r\n                        if(connect4board[i + j*7] === \"O\"){\r\n                            message = \"Winner: Red in move number \" + this.state.moves;\r\n                        }else{\r\n                            message = \"Winner: Yellow in move number \" + this.state.moves;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Checks diagonals ascending left to right.\r\n            for(let i = 3; i < 7; i++){\r\n                for(let j = 0; j < 3; j++){\r\n                    if(connect4board[i + j*7] === connect4board[i + j*7 + 6] && connect4board[i + j*7 + 12] === connect4board[i + j*7 + 18]\r\n                    && connect4board[i + j*7] === connect4board[i + j*7 + 12] && connect4board[i + j*7] !== \"\"){\r\n                        winner = 1;\r\n                        if(connect4board[i + j*7] === \"O\"){\r\n                            message = \"Winner: Red in move number \" + this.state.moves;\r\n                        }else{\r\n                            message = \"Winner: Yellow in move number \" + this.state.moves;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Max moves and no winner therefore must be a tie!\r\n            if(moves === 43 && winner === 0){\r\n                winner = 1;\r\n                message = \"Tie!\"\r\n            }\r\n\r\n            this.setState({\r\n                player_turn: player_turn,\r\n                connect4board: connect4board,\r\n                winner: winner,\r\n                message: message,\r\n                moves: moves\r\n            })\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            connect4board:[],\r\n            player_turn: \"X\",\r\n            winner: 0,\r\n            message: \"\",\r\n            moves: 1\r\n        })\r\n\r\n        this.createBoard();\r\n    }\r\n\r\n    createBoard(){\r\n        let connect4board = [];\r\n\r\n        // 6 Rows and 7 Cols.\r\n        for(let i = 0; i < 42; i++){\r\n            connect4board.push(\"\");\r\n        }\r\n\r\n        this.setState({\r\n            connect4board:connect4board\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.createBoard();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n              <div style={{display:'flex', margin:'auto', justifyContent:'center', backgroundColor:'#3F2C7F'}}>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}>Kevin Su</h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/TicTacToe'} style={{ color: 'white'}}>Tic-Tac-Toe</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Connect4'} style={{ color: 'white'}}>Connect-4</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Calculator'} style={{ color: 'white'}}>Calculator</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Sorter'} style={{ color: 'white'}}>Sorter</Link></h4>\r\n              </div>\r\n              <header className=\"App-header\">\r\n                <div style={{display:'flex'}}>\r\n                    <h1 style={{color:'yellow'}}>Connect </h1>\r\n                    <h1>-</h1>\r\n                    <h1 style={{color:'red'}}>4 </h1>\r\n                </div>\r\n                <div className=\"connect4grid\">\r\n                    {this.state.connect4board.map((connect4square, index)=>{\r\n                        return(<div onClick={()=>this.squareClicked(index)} className={this.state.connect4board[index] === \"\" ? 'connect4square' :\r\n                        this.state.connect4board[index] === \"X\" ? 'connect4squareX' : 'connect4squareO'}><h3></h3></div>)\r\n                    })}\r\n                </div>\r\n                <h4>{this.state.message}</h4>\r\n                <button onClick={()=>this.reset()} className=\"button\">Reset</button>\r\n              </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Connect4;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass Button extends Component{\r\n    // Check if the element is a number.\r\n    isOperator = val =>{\r\n        return !isNaN(val) || val === \".\" || val === \"=\";\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            //Check if the button is an operator (not a number!) if so style it differently.\r\n            <div className={`button2 ${this.isOperator(this.props.children)\r\n            ? \"\" : \"operator\"}`} onClick={() => this.props.handleClick(this.props.children)}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React, {Component} from 'react';\r\nimport './index.css';\r\n\r\nclass CalcInput extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"calcInput\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalcInput;\r\n","import React, {Component} from 'react';\r\nimport './index.css';\r\n\r\nclass ClearButton extends Component{\r\n    render(){\r\n        return (\r\n            <div className = \"clearButton\" onClick={() => this.props.handleClear()}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClearButton;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport './index.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Button from './Button'\r\nimport CalcInput from './CalcInput'\r\nimport ClearButton from './ClearButton'\r\n\r\nclass Calculator extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            prevNumber: \"\",\r\n            currentNumber: \"\",\r\n            operator: \"\"\r\n        }\r\n    }\r\n\r\n    // Concatenates the number pressed to the input\r\n    addInput = val => {\r\n        if(val === \"0\"){\r\n            // Ensure we don't add 0 to the front only behind numbers\r\n            if(this.state.input !== \"\"){\r\n                this.setState({input: this.state.input + val});\r\n            }\r\n        }else{\r\n            this.setState({input: this.state.input + val});\r\n        }\r\n    };\r\n\r\n    addDecimal = val => {\r\n        // If the user wishes to add demical point at the start we need to add 0 first\r\n        if(this.state.input === \"\"){\r\n            this.setState({input: this.state.input + \"0.\"})\r\n        }else{\r\n            // Only add a decimal point once\r\n            // indexOf is -1 meaning it is NOT there\r\n            if(this.state.input.indexOf(\".\") === -1){\r\n                this.setState({input: this.state.input + val});\r\n            }\r\n        }\r\n    };\r\n\r\n    addition = () => {\r\n        let prevNum = this.state.input;\r\n        let operator = \"plus\";\r\n\r\n        this.setState({\r\n            prevNumber: prevNum,\r\n            input: \"\",\r\n            operator: operator\r\n        })\r\n    };\r\n\r\n    subtraction = () => {\r\n        let prevNum = this.state.input;\r\n        let operator = \"minus\";\r\n\r\n        this.setState({\r\n            prevNumber: prevNum,\r\n            input: \"\",\r\n            operator: operator\r\n        })\r\n    };\r\n\r\n    multiplication = () => {\r\n        let prevNum = this.state.input;\r\n        let operator = \"times\";\r\n\r\n        this.setState({\r\n            prevNumber: prevNum,\r\n            input: \"\",\r\n            operator: operator\r\n        })\r\n    };\r\n\r\n    division = () => {\r\n        let prevNum = this.state.input;\r\n        let operator = \"divide\";\r\n\r\n        this.setState({\r\n            prevNumber: prevNum,\r\n            input: \"\",\r\n            operator: operator\r\n        })\r\n    };\r\n\r\n    // Get the input and check which operator the user has selected and perform\r\n    // based on that.\r\n    equal = () => {\r\n        //this.state.currentNumber = this.state.input;\r\n        let curr = this.state.input;\r\n\r\n        if(this.state.operator === \"plus\"){\r\n            this.setState({\r\n                input: parseFloat(this.state.prevNumber) + parseFloat(curr),\r\n                currentNumber: this.state.input\r\n            });\r\n        }\r\n        else if(this.state.operator === \"minus\"){\r\n            this.setState({\r\n                input: parseFloat(this.state.prevNumber) - parseFloat(curr),\r\n                currentNumber: this.state.input\r\n            });\r\n        }\r\n        if(this.state.operator === \"times\"){\r\n            this.setState({\r\n                input: parseFloat(this.state.prevNumber) * parseFloat(curr),\r\n                currentNumber: this.state.input\r\n            });\r\n        }\r\n        if(this.state.operator === \"divide\"){\r\n            this.setState({\r\n                input: parseFloat(this.state.prevNumber) / parseFloat(curr),\r\n                currentNumber: this.state.input\r\n            });\r\n        }\r\n    };\r\n\r\n    clearInput = () => {\r\n        this.setState({ input: \"\"});\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n              <div style={{display:'flex', margin:'auto', justifyContent:'center', backgroundColor:'#3F2C7F'}}>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}>Kevin Su</h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/TicTacToe'} style={{ color: 'white'}}>Tic-Tac-Toe</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Connect4'} style={{ color: 'white'}}>Connect-4</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Calculator'} style={{ color: 'white'}}>Calculator</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Sorter'} style={{ color: 'white'}}>Sorter</Link></h4>\r\n              </div>\r\n              <header className=\"App-header\">\r\n                  <h1 style={{ color: 'orange'}}>Calculator</h1>\r\n                  <div className = \"calc\">\r\n                    <div className = \"calcRow\">\r\n                        <CalcInput>{this.state.input}</CalcInput>\r\n                    </div>\r\n                    <div className = \"calcRow\">\r\n                        <Button handleClick={this.addInput}>7</Button>\r\n                        <Button handleClick={this.addInput}>8</Button>\r\n                        <Button handleClick={this.addInput}>9</Button>\r\n                        <Button handleClick={this.division}>/</Button>\r\n                    </div>\r\n                    <div className = \"calcRow\">\r\n                        <Button handleClick={this.addInput}>4</Button>\r\n                        <Button handleClick={this.addInput}>5</Button>\r\n                        <Button handleClick={this.addInput}>6</Button>\r\n                        <Button handleClick={this.multiplication}>X</Button>\r\n                    </div>\r\n                    <div className = \"calcRow\">\r\n                        <Button handleClick={this.addInput}>1</Button>\r\n                        <Button handleClick={this.addInput}>2</Button>\r\n                        <Button handleClick={this.addInput}>3</Button>\r\n                        <Button handleClick={this.addition}>+</Button>\r\n                    </div>\r\n                    <div className = \"calcRow\">\r\n                        <Button handleClick={this.addDecimal}>.</Button>\r\n                        <Button handleClick={this.addInput}>0</Button>\r\n                        <Button handleClick={this.equal}>=</Button>\r\n                        <Button handleClick={this.subtraction}>-</Button>\r\n                    </div>\r\n                    <div className = \"calcRow\">\r\n                        <ClearButton handleClear={this.clearInput}>CE</ClearButton>\r\n                    </div>\r\n                </div>\r\n              </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Sorter extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            numbers:[]\r\n        }\r\n    }\r\n\r\n    createNumbers(){\r\n        const numbers = [];\r\n        // Max number: 1000, min number: 10\r\n        for (let i = 0; i < 200; i++) {\r\n          numbers.push(Math.floor(Math.random() * (1000) + 10));\r\n        }\r\n        this.setState({\r\n            numbers: numbers\r\n        });\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.createNumbers();\r\n    }\r\n\r\n    // Function to animate the merge sort\r\n    animate(){\r\n        const swapArray = this.mergeSort(this.state.numbers);\r\n\r\n        // Merge sort function will return an array holding all the values that\r\n        // have been swapped and we simply change the styling of the bars\r\n        for(let i = 0; i < swapArray.length; i++){\r\n            const bars = document.getElementsByClassName('bar');\r\n            setTimeout(() => {\r\n                const [bar1Index, bar2Height] = swapArray[i];\r\n                const bar1Style = bars[bar1Index].style;\r\n                bar1Style.height = `${bar2Height/2}px`;\r\n            }, i*5)\r\n        }\r\n    }\r\n\r\n    mergeSort(arr){\r\n        const swapArray = [];\r\n\r\n        // Trivial base case\r\n        if(arr.length <= 1){\r\n            return arr;\r\n        }\r\n\r\n        // Make a copy of the original array\r\n        // to\r\n        const arr2 = arr.slice();\r\n\r\n        this.mergeSort2(arr, 0, arr.length - 1, arr2, swapArray);\r\n        return swapArray;\r\n    }\r\n\r\n    // Sorting function\r\n    mergeSort2(arr, start, end, arr2, swapArray){\r\n\r\n        // Trivial base case\r\n        if(start===end){\r\n            return;\r\n        }\r\n\r\n        // Divide and conquer algorithm\r\n        const middle = Math.floor((start+end)/2);\r\n        this.mergeSort2(arr2, start, middle, arr, swapArray);\r\n        this.mergeSort2(arr2, middle+1, end, arr, swapArray);\r\n        this.merge(arr, start, middle, end, arr2, swapArray);\r\n    }\r\n\r\n    // Uses indices of the array as opposed to two array halves\r\n    // This is so we know which two values to swap in the actual array\r\n    // making it possible to animate.\r\n    // Modify the array as we go.\r\n    merge(arr, start, middle, end, arr2, swapArray){\r\n        // i variable holds the index of the final merged array\r\n        let i = start;\r\n\r\n        // j and k hold the indices of the two arrays we wish to merge together\r\n        let j = start;\r\n        let k = middle+1;\r\n\r\n        // Compares numbers in the first half to the numbers in the second half\r\n        while(j <= middle && k <= end){\r\n            if(arr2[j] <= arr2[k]){\r\n                swapArray.push([i, arr2[j]]);\r\n                arr[i++] = arr2[j++];\r\n            }else{\r\n                swapArray.push([i, arr2[k]]);\r\n                arr[i++] = arr2[k++];\r\n            }\r\n        }\r\n\r\n        // Get the remaining numbers in first half, if any...\r\n        while(j <= middle){\r\n            swapArray.push([i, arr2[j]]);\r\n            arr[i++] = arr2[j++];\r\n        }\r\n\r\n        // Get the remaining numbers in second half, if any...\r\n        while(k <= end){\r\n            swapArray.push([i, arr2[k]]);\r\n            arr[i++] = arr2[k++];\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n              <div style={{display:'flex', margin:'auto', justifyContent:'center', backgroundColor:'#3F2C7F'}}>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}>Kevin Su</h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/TicTacToe'} style={{ color: 'white'}}>Tic-Tac-Toe</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Connect4'} style={{ color: 'white'}}>Connect-4</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Calculator'} style={{ color: 'white'}}>Calculator</Link></h4>\r\n                <h4 style={{color:'white', marginRight:'20px', marginLeft:'20px'}}><Link to={'/Sorter'} style={{ color: 'white'}}>Sorter</Link></h4>\r\n              </div>\r\n              <header className=\"App-header\">\r\n                <h1 style={{color: 'white'}}>Merge Sorter</h1>\r\n                <div className=\"container\">\r\n                    {this.state.numbers.map((value, id) => (\r\n                      <div className=\"bar\" key={id} style={{backgroundColor: 'white', height: `${value/2}px`}}></div>\r\n                    ))}\r\n                </div>\r\n                <div style={{ display: 'inline-block'}}>\r\n                    <button onClick={() => this.createNumbers()} className=\"button\">Reset</button>\r\n                    <button onClick={() => this.animate()} className=\"button\">Sort</button>\r\n                </div>\r\n              </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sorter;\r\n","import React, {Fragment} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport Connect4 from './Connect4'\r\nimport Calculator from './Calculator'\r\nimport Sorter from './Sorter'\r\n\r\nfunction Main(){\r\n  return (\r\n      <Router>\r\n      <Fragment>\r\n          <Switch>\r\n          <Route exact path = '/' component = {App} />\r\n          <Route exact path = '/Connect4' component = {Connect4} />\r\n          <Route exact path = '/Tictactoe' component = {App} />\r\n          <Route exact path = '/Calculator' component = {Calculator} />\r\n          <Route exact path = '/Sorter' component = {Sorter} />\r\n          </Switch>\r\n      </Fragment>\r\n      </Router>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}